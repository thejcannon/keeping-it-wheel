# The main workflow to build a wheel and upload it as a release asset.
#
# Some philosophies:
#   - As much as possible, use what's already installed
#   - If something needs installing, use a pinned version
#   - (and ideally, that should include transitive dependencies)
#
# The point of this is to ensure that wheel consumers can trust,
#   as much as possible, the environment which built the wheel.

# [[[cog
# UBUNTU_RUNNER = "ubuntu-24.04"
# WINDOWS_RUNNER = "windows-2025"
# MACOS_RUNNER = "macos-14"
# ]]]
# [[[end]]]
name: "Dispatch: Build and Upload Wheel"

on:
  workflow_dispatch:
    inputs:
      package_name:
        description: "PyPI package name"
        required: true
      package_version:
        description: "Package version"
        required: true
      issue_number:
        description: "Issue number to respond to when complete"
        required: true

env:
  GH_REPO: ${{ github.repository }}
  GITHUB_EVENT_INPUTS_PACKAGE_NAME: ${{ github.event.inputs.package_name }}
  GITHUB_EVENT_INPUTS_PACKAGE_VERSION: ${{ github.event.inputs.package_version }}
  GITHUB_EVENT_INPUTS_ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}

permissions: {}

jobs:
  build_pure_wheel:
    name: Build pure Python wheel
    # [[[cog cog.outl(f"runs-on: {UBUNTU_RUNNER}") ]]]
    runs-on: ubuntu-24.04
    # [[[end]]]
    outputs:
      is_pure: ${{ steps.check_pure.outputs.is_pure }}
    steps:
      - uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        id: app-token
        with:
          app-id: ${{ vars.MR_WENSLEYDALE_APP_ID }}
          private-key: ${{ secrets.MR_WENSLEYDALE_APP_PEM }}

      - name: Set auth token
        env:
          TOKEN: ${{ steps.app-token.outputs.token }}
        run: gh auth login --with-token <<< $TOKEN

      - name: Update issue with link
        run: |
          gh issue comment ${GITHUB_EVENT_INPUTS_ISSUE_NUMBER} \
            --edit-last \
            --body ":hourglass_flowing_sand: It's uhh... [Still running](https://github.com/thejcannon/keeping-it-wheel/actions/runs/${{ github.run_number }}), sir."

      - name: Install build deps
        run: |
          curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/$GITHUB_REF/cibuildwheel-requirements.txt \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            > cibuildwheel-requirements.txt
          python -m pip install --require-hashes -r cibuildwheel-requirements.txt
          rm cibuildwheel-requirements.txt

      # [[[cog cog.include("steps/download-sdist.yaml") ]]]
      - name: Download the sdist
        id: download-sdist
        run: |
          pip download --no-deps --no-binary=:all: ${GITHUB_EVENT_INPUTS_PACKAGE_NAME}==${GITHUB_EVENT_INPUTS_PACKAGE_VERSION}
          tarball=$(ls *.tar.gz)
          echo "tarball-hash=$(sha256sum "$tarball")" >> "$GITHUB_OUTPUT"
          tar --strip-components=1 -xvf  "$tarball"
          rm "$tarball"
      # [[[end]]]
      - name: Build pure Python wheel
        run: python -m build --wheel .

      - name: Check if wheel is pure Python
        id: check_pure
        run: echo "is_pure=$(ls dist/*.whl | grep -q none-any.whl && echo true || echo false)" >> $GITHUB_OUTPUT

      # [[[cog cog.include("steps/make-release.yaml") ]]]
      - name: Make release
        env:
          STEPS_DOWNLOAD_SDIST_OUTPUTS_TARBALL_HASH: ${{ steps.download-sdist.outputs.tarball-hash }}
        run: |
          gh release create \
              ${GITHUB_EVENT_INPUTS_PACKAGE_NAME}-${GITHUB_EVENT_INPUTS_PACKAGE_VERSION} \
              --title ${GITHUB_EVENT_INPUTS_PACKAGE_NAME}-${GITHUB_EVENT_INPUTS_PACKAGE_VERSION} \
              --notes "${STEPS_DOWNLOAD_SDIST_OUTPUTS_TARBALL_HASH}" \
              --draft \
              dist/*.whl
      # [[[end]]]

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [build_pure_wheel]
    if: needs.build_pure_wheel.outputs.is_pure != 'true'
    strategy:
      matrix:
        os:
          # [[[cog
          # cog.outl(f"- {UBUNTU_RUNNER}")
          # cog.outl(f"- {WINDOWS_RUNNER}")
          # cog.outl(f"- {MACOS_RUNNER}")
          # ]]]
          - ubuntu-24.04
          - windows-2025
          - macos-14
          # [[[end]]]
    steps:
      - uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        id: app-token
        with:
          app-id: ${{ vars.MR_WENSLEYDALE_APP_ID }}
          private-key: ${{ secrets.MR_WENSLEYDALE_APP_PEM }}
      # [[[cog cog.include("steps/download-sdist.yaml") ]]]
      - name: Download the sdist
        id: download-sdist
        run: |
          pip download --no-deps --no-binary=:all: ${GITHUB_EVENT_INPUTS_PACKAGE_NAME}==${GITHUB_EVENT_INPUTS_PACKAGE_VERSION}
          tarball=$(ls *.tar.gz)
          echo "tarball-hash=$(sha256sum "$tarball")" >> "$GITHUB_OUTPUT"
          tar --strip-components=1 -xvf  "$tarball"
          rm "$tarball"
      # [[[end]]]
      - name: Build wheels
        uses: pypa/cibuildwheel@9c00cb4f6b517705a3794b22395aedc36257242c # v3.2.1
        env:
          CIBW_REPAIR_WHEEL_COMMAND: ""
        with:
          package-dir: .
          output-dir: dist

      - name: Upload wheels to release
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          gh release upload ${GITHUB_EVENT_INPUTS_PACKAGE_NAME}-${GITHUB_EVENT_INPUTS_PACKAGE_VERSION} \
            dist/*.whl \
            --clobber

  publish_release:
    name: Publish Release
    needs: [build_pure_wheel, build_wheels]
    # [[[cog cog.outl(f"runs-on: {UBUNTU_RUNNER}") ]]]
    runs-on: ubuntu-24.04
    # [[[end]]]
    if: ${{ ! failure()}}
    steps:
      - uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        id: app-token
        with:
          app-id: ${{ vars.MR_WENSLEYDALE_APP_ID }}
          private-key: ${{ secrets.MR_WENSLEYDALE_APP_PEM }}

      - name: Set auth token
        env:
          TOKEN: ${{ steps.app-token.outputs.token }}
        run: gh auth login --with-token <<< $TOKEN

      - name: Publish release
        run: gh release edit ${GITHUB_EVENT_INPUTS_PACKAGE_NAME}-${GITHUB_EVENT_INPUTS_PACKAGE_VERSION} --draft=false

      - name: Report Success
        run: |
          gh issue comment ${GITHUB_EVENT_INPUTS_ISSUE_NUMBER} --edit-last \
            --body ":white_check_mark: Ah! We have ${GITHUB_EVENT_INPUTS_PACKAGE_NAME}, yessir."
          gh issue close ${GITHUB_EVENT_INPUTS_ISSUE_NUMBER} --reason completed

  report-failure:
    name: Report Failure
    needs: [build_pure_wheel, publish_release]
    # [[[cog cog.outl(f"runs-on: {UBUNTU_RUNNER}") ]]]
    runs-on: ubuntu-24.04
    # [[[end]]]
    if: failure()
    steps:
      - uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        id: app-token
        with:
          app-id: ${{ vars.MR_WENSLEYDALE_APP_ID }}
          private-key: ${{ secrets.MR_WENSLEYDALE_APP_PEM }}

      - name: Set auth token
        env:
          TOKEN: ${{ steps.app-token.outputs.token }}
        run: gh auth login --with-token <<< $TOKEN

      - name: Report Failure
        run: |
          gh issue comment ${GITHUB_EVENT_INPUTS_ISSUE_NUMBER} \
            --edit-last \
            --body ":x: Normally, sir, we'd have that. But today the [workflow run](https://github.com/thejcannon/keeping-it-wheel/actions/runs/${{ github.run_number }}) broke down."
        # @TODO: Should we close?
