# The main workflow to build a wheel and upload it as a release asset.
#
# Some philosophies:
#   - As much as possible, use what's already installed
#   - If something needs installing, use a pinned version
#   - (and ideally, that should include transitive dependencies)
#
# The point of this is to ensure that wheel consumers can trust,
#   as much as possible, the environment which built the wheel.

# [[[cog
# import httpx
#
# UBUNTU_RUNNER = "ubuntu-24.04"
# WINDOWS_RUNNER = "windows-2025"
# MACOS_RUNNER = "macos-14"
#
# # @TODO: Figure out how to selectively update this...
# with httpx.Client(base_url="https://api.github.com/repos/pypa/cibuildwheel") as client:
#   CI_BUILDWHEEL_TAG = client.get("/releases/latest").raise_for_status().json()["tag_name"]
#   CI_BUILDWHEEL_TAG_SHA = client.get(f"/git/ref/tags/{CI_BUILDWHEEL_TAG}").raise_for_status().json()["object"]["sha"]
#   CI_BUILDHWEEL_COMMIT_SHA = client.get(f"/git/tags/{CI_BUILDWHEEL_TAG_SHA}").raise_for_status().json()["object"]["sha"]
# ]]]
# [[[end]]]
name: Build and Upload Wheel

on:
  workflow_dispatch:
    inputs:
      package_name:
        description: "PyPI package name"
        required: true
      package_version:
        description: "Package version"
        required: true
      issue_number:
        description: "Issue number to respond to when complete"
        required: false

env:
  GH_REPO: ${{ github.repository }}

jobs:
  build_pure_wheel:
    name: Build pure Python wheel
    # [[[cog cog.outl(f"runs-on: {UBUNTU_RUNNER}") ]]]
    runs-on: ubuntu-24.04
    # [[[end]]]
    permissions:
      contents: write
    outputs:
      is_pure: ${{ steps.check_pure.outputs.is_pure }}
    steps:
      # [[[cog cog.include("steps/install-build-deps.yml") ]]]
      - name: Install build deps
        run: |
          curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/$GITHUB_REF/build-requirements.txt \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            > build-requirements.txt
          python -m pip install --require-hashes -r build-requirements.txt
          rm build-requirements.txt
      # [[[end]]]
      # [[[cog cog.include("steps/download-sdist.yml") ]]]
      - name: Download the sdist
        id: download-sdist
        shell: bash
        run: |
          pip download --no-deps --no-binary=:all: ${GITHUB_EVENT_INPUTS_PACKAGE_NAME}==${GITHUB_EVENT_INPUTS_PACKAGE_VERSION}
          tarball=$(ls *.tar.gz)
          echo "tarball-hash=$(sha256sum "$tarball")" >> "$GITHUB_OUTPUT"
          tar --strip-components=1 -xvf  "$tarball"
          rm "$tarball"
        env:
          GITHUB_EVENT_INPUTS_PACKAGE_NAME: ${{ github.event.inputs.package_name }}
          GITHUB_EVENT_INPUTS_PACKAGE_VERSION: ${{ github.event.inputs.package_version }}
      # [[[end]]]

      - name: Build pure Python wheel
        shell: bash
        run: python -m build --wheel .

      - name: Check if wheel is pure Python
        id: check_pure
        run: |
          wheel_name=$(ls dist/*.whl)
          if [[ $wheel_name == *none-any.whl ]]; then
            echo "is_pure=true" >> $GITHUB_OUTPUT
          fi

      # [[[cog cog.include("steps/make-release.yaml") ]]]
      - name: Make release
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_EVENT_INPUTS_PACKAGE_NAME: ${{ github.event.inputs.package_name }}
          GITHUB_EVENT_INPUTS_PACKAGE_VERSION: ${{ github.event.inputs.package_version }}
        run: |
          gh release create \
              ${GITHUB_EVENT_INPUTS_PACKAGE_NAME}-${GITHUB_EVENT_INPUTS_PACKAGE_VERSION} \
              --title ${GITHUB_EVENT_INPUTS_PACKAGE_NAME}-${GITHUB_EVENT_INPUTS_PACKAGE_VERSION} \
              --notes "${{ steps.download-sdist.outputs.tarball-hash }}" \
              --draft \
              dist/*.whl
      # [[[end]]]
      # [[[cog cog.include("steps/publish-release.yaml") ]]]
      - name: Publish release
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_EVENT_INPUTS_PACKAGE_NAME: ${{ github.event.inputs.package_name }}
          GITHUB_EVENT_INPUTS_PACKAGE_VERSION: ${{ github.event.inputs.package_version }}
        run: gh release edit ${GITHUB_EVENT_INPUTS_PACKAGE_NAME}-${GITHUB_EVENT_INPUTS_PACKAGE_VERSION} --draft=false
        # [[[end]]]
        if: steps.check_pure.outputs.is_pure == 'true'

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [build_pure_wheel]
    if: needs.build_pure_wheel.outputs.is_pure != 'true'
    permissions:
      contents: write
    strategy:
      matrix:
        os:
          # [[[cog
          # cog.outl(f"- {UBUNTU_RUNNER}")
          # cog.outl(f"- {WINDOWS_RUNNER}")
          # cog.outl(f"- {MACOS_RUNNER}")
          # ]]]
          - ubuntu-24.04
          - windows-2025
          - macos-14
          # [[[end]]]
    steps:
      # [[[cog cog.include("steps/download-sdist.yml") ]]]
      - name: Download the sdist
        id: download-sdist
        shell: bash
        run: |
          pip download --no-deps --no-binary=:all: ${GITHUB_EVENT_INPUTS_PACKAGE_NAME}==${GITHUB_EVENT_INPUTS_PACKAGE_VERSION}
          tarball=$(ls *.tar.gz)
          echo "tarball-hash=$(sha256sum "$tarball")" >> "$GITHUB_OUTPUT"
          tar --strip-components=1 -xvf  "$tarball"
          rm "$tarball"
        env:
          GITHUB_EVENT_INPUTS_PACKAGE_NAME: ${{ github.event.inputs.package_name }}
          GITHUB_EVENT_INPUTS_PACKAGE_VERSION: ${{ github.event.inputs.package_version }}
      # [[[end]]]

      - name: Build wheels
        # [[[cog cog.outl(f"uses: pypa/cibuildwheel@{CI_BUILDHWEEL_COMMIT_SHA} # {CI_BUILDWHEEL_TAG}") ]]]
        uses: pypa/cibuildwheel@95d2f3a92fbf80abe066b09418bbf128a8923df2 # v3.0.1
        # [[[end]]]
        env:
          CIBW_REPAIR_WHEEL_COMMAND: ""
        with:
          package-dir: .
          output-dir: dist

      - name: Upload wheels to release
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_EVENT_INPUTS_PACKAGE_NAME: ${{ github.event.inputs.package_name }}
          GITHUB_EVENT_INPUTS_PACKAGE_VERSION: ${{ github.event.inputs.package_version }}
        run: |
          for wheel in dist/*.whl; do
            gh release upload ${GITHUB_EVENT_INPUTS_PACKAGE_NAME}-${GITHUB_EVENT_INPUTS_PACKAGE_VERSION} "$wheel" --clobber
          done

  publish_release:
    name: Publish Release
    needs: [build_wheels]
    # [[[cog cog.outl(f"runs-on: {UBUNTU_RUNNER}") ]]]
    runs-on: ubuntu-24.04
    # [[[end]]]
    permissions:
      contents: write
    steps:
      # [[[cog cog.include("steps/publish-release.yaml") ]]]
      - name: Publish release
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_EVENT_INPUTS_PACKAGE_NAME: ${{ github.event.inputs.package_name }}
          GITHUB_EVENT_INPUTS_PACKAGE_VERSION: ${{ github.event.inputs.package_version }}
        run: gh release edit ${GITHUB_EVENT_INPUTS_PACKAGE_NAME}-${GITHUB_EVENT_INPUTS_PACKAGE_VERSION} --draft=false
        # [[[end]]]

  comment-on-pr:
    name: Comment on PR
    needs: [build_pure_wheel, publish_release]
    # [[[cog cog.outl(f"runs-on: {UBUNTU_RUNNER}") ]]]
    runs-on: ubuntu-24.04
    # [[[end]]]
    if: always() && github.event.inputs.issue_number
    permissions:
      issues: write
    steps:
      - name: Close issue
        if: contains(needs.*.result, 'success')
        run: |
          gh issue close ${GITHUB_EVENT_INPUTS_ISSUE_NUMBER} \
            --comment 'Wheels built successfully.

          See the run [here](https://github.com/thejcannon/keeping-it-wheel/actions/runs/${GITHUB_RUN_ID})'
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_EVENT_INPUTS_ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
          GITHUB_RUN_ID: ${{ github.run_id }}
      - name: Comment on issue
        if: |
          ! contains(needs.*.result , 'success')
        run: |
          gh issue comment ${GITHUB_EVENT_INPUTS_ISSUE_NUMBER} \
            --body 'Something went wrong.

          See the run [here](https://github.com/thejcannon/keeping-it-wheel/actions/runs/${GITHUB_RUN_ID})'
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_EVENT_INPUTS_ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
          GITHUB_RUN_ID: ${{ github.run_id }}
