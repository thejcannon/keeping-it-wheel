name: Build and Upload Wheel

on:
  workflow_dispatch:
    inputs:
      package_name:
        description: 'PyPI package name'
        required: true
      package_version:
        description: 'Package version'
        required: true

permissions:
  contents: write

env:
  GH_REPO: ${{ github.repository }}

jobs:
  build_pure_wheel:
    name: Build pure Python wheel
    runs-on: ubuntu-latest
    outputs:
      is_pure: ${{ steps.check_pure.outputs.is_pure }}

    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install pipx
      run: python -m pip install pipx

    - name: Download sdist
      run: |
        pip download --no-binary=:all: ${{ github.event.inputs.package_name }}==${{ github.event.inputs.package_version }}
        tar -xvf ${{ github.event.inputs.package_name }}-${{ github.event.inputs.package_version }}.tar.gz
        mv ${{ github.event.inputs.package_name }}-${{ github.event.inputs.package_version }}/* .
        rm ${{ github.event.inputs.package_name }}-${{ github.event.inputs.package_version }}.tar.gz

    - name: Build pure Python wheel
      run: pipx run build --wheel .

    - name: Check if wheel is pure Python
      id: check_pure
      run: |
        wheel_name=$(ls dist/*.whl)
        if [[ $wheel_name == *none-any.whl ]]; then
          echo "is_pure=true" >> $GITHUB_OUTPUT
        else
          echo "is_pure=false" >> $GITHUB_OUTPUT
        fi

    - name: Upload wheel to release
      env:
        GH_TOKEN: ${{ github.token }}
      run: gh release create ${{ github.event.inputs.package_name }}-${{ github.event.inputs.package_version }} dist/*.whl --clobber

  draft_release:
    name: Ensure Release
    runs-on: ubuntu-latest
    needs: [build_pure_wheel]
    if: needs.build_pure_wheel.outputs.is_pure != 'true'
    steps:
    - name: Ensure draft release
      id: ensure_release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        if ! gh release view ${{ github.event.inputs.package_name }}-${{ github.event.inputs.package_version }} &>/dev/null; then
          gh release create ${{ github.event.inputs.package_name }}-${{ github.event.inputs.package_version }} --draft --title "${{ github.event.inputs.package_name }} ${{ github.event.inputs.package_version }}" --generate-notes
        fi

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    needs: [draft_release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Download sdist
      run: |
        pip download --no-binary=:all: ${{ github.event.inputs.package_name }}==${{ github.event.inputs.package_version }}
        tar -xvf ${{ github.event.inputs.package_name }}-${{ github.event.inputs.package_version }}.tar.gz
        mv ${{ github.event.inputs.package_name }}-${{ github.event.inputs.package_version }}/* .
        rm ${{ github.event.inputs.package_name }}-${{ github.event.inputs.package_version }}.tar.gz

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.19.1
      env:
        CIBW_REPAIR_WHEEL_COMMAND: ""
      with:
        package-dir: .
        output-dir: dist

    - name: Upload wheels to release
      env:
        GH_TOKEN: ${{ github.token }}
      run: gh release upload ${{ github.event.inputs.package_name }}-${{ github.event.inputs.package_version }} dist/*.whl --clobber

  publish_release:
    name: Publish Release
    needs: [build_wheels]
    runs-on: ubuntu-latest
    steps:
    - name: Publish Release
      env:
        GH_TOKEN: ${{ github.token }}
      run: gh release edit ${{ github.event.inputs.package_name }}-${{ github.event.inputs.package_version }} --draft=false
